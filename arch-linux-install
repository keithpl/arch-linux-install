#!/bin/bash

set -eEuo pipefail
trap 'echo "Error: $BASH_COMMAND failed ($?)"' ERR

install_dev="/dev/nvme0n1"
boot_part="${install_dev}p1"
root_part="${install_dev}p2"
root_vol_name="root"
root_vol="/dev/mapper/${root_vol_name}"

crypto_pass=""
root_pass=""

chroot_dir="/mnt/arch"
chroot_boot_dir="${chroot_dir}/boot"

net_hostname="beta"
net_domain="local.lan"
net_fqdn="${net_hostname}.${net_domain}"
net_iface="wlan0"
net_iface_mtu="1500"

function root_check() {
	if [[ $EUID != 0 ]]; then
		echo "This script must be run with root privileges."
		exit 1
	fi
}

function enable_livecd_ntp() {
	timedatectl set-ntp true
}

function get_password_crypto() {
	local crypto_pass_confim=""

	while true; do
		read -s -p "Enter passphrase for $root_part: " crypto_pass
		echo

		read -s -p "Confirm passphrase: " crypto_pass_confirm
		echo

		if [[ "$crypto_pass" == "$crypto_pass_confirm" ]]; then
			break;
		else
			echo "Passphrases do not match"
		fi
	done
}

function get_password_root() {
	local root_pass_confirm=""

	while true; do
		read -s -p "Set root passphrase for $net_fqdn: " root_pass
		echo

		read -s -p "Confirm passphrase: " root_pass_confirm
		echo

		if [[ "$root_pass" == "$root_pass_confirm" ]]; then
			break;
		else
			echo "Passphrases do not match"
		fi
	done
}

function partition_install_dev() {
	local gdisk_cmds="n\n\n\n+512M\nef00\nn\n\n\n\n\nw\nY\n"

	echo "- Wiping disk: $install_dev"
	wipefs -afq "${install_dev}"

	echo "- Partitioning disk: $install_dev"
	echo -e "$gdisk_cmds" | gdisk "$install_dev" > /dev/null
}

function encrypt_root_partition() {
	echo "- Encrypting root partition: $root_part"
	echo "$crypto_pass" | cryptsetup luksFormat "$root_part"

	echo "- Opening encrypted root volume: $root_vol"
	echo "$crypto_pass" | cryptsetup --allow-discards 		\
		--perf-no_read_workqueue --perf-no_write_workqueue 	\
		--persistent open "$root_part" "$root_vol_name"

	unset crypto_pass
}

function create_filesystems() {
	echo "- Formatting boot partition: $boot_part"
	mkfs.fat -F32 "$boot_part"

	echo "- Formatting encrypted root volume: $root_vol"
	mkfs.btrfs -q "$root_vol"
}

function mount_filesystems() {
	echo "- Creating chroot mountpoint: $chroot_dir"
	mkdir -p "$chroot_dir"

	echo "- Mounting root filesystem on $root_vol to $chroot_dir"
	mount "$root_vol" "$chroot_dir"

	echo "- Creating boot partition mountpoint: $chroot_boot_dir"
	mkdir -p "$chroot_boot_dir"

	echo "- Mounting boot filesystem on $boot_part to $chroot_boot_dir"
	mount "$boot_part" "$chroot_boot_dir"
}

function chroot_bootstrap() {
	echo "- Bootstrapping chroot environment: $chroot_dir"
	sed -i 's/^#ParallelDownloads.*/ParallelDownloads = 5/g' \
		/etc/pacman.conf

	pacstrap "$chroot_dir" base linux linux-firmware linux-headers \
		neovim grub efibootmgr intel-ucode btrfs-progs dosfstools

	genfstab -U "$chroot_dir" >> "${chroot_dir}/etc/fstab"
}

function chroot_config_time() {
cat << EOF
	echo "-- Configuring time"
	ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime
	hwclock --systohc

	systemctl --quiet enable systemd-timesyncd
EOF
}

function chroot_config_locale() {
cat << EOF
	echo "-- Configuring locale"
	sed -i '/^#en_US/s/^#//g' /etc/locale.gen
	sed -i '/^#ru_RU/s/^#//g' /etc/locale.gen
	locale-gen

	echo "LANG=en_US.UTF-8" > /etc/locale.conf
EOF
}

function chroot_config_keymap() {
cat << EOF
	echo "-- Configuring keymap"
	echo "KEYMAP=us" > /etc/vconsole.conf
EOF
}

function chroot_config_editor() {
cat << EOF
	echo "-- Configuring default \$EDITOR"
	echo "EDITOR=nvim" >> /etc/environment
	echo "export EDITOR=nvim" >> /etc/profile
EOF
}

function chroot_config_hostname() {
cat << EOF
	echo "-- Configuring hostname"
	echo "$net_hostname" > /etc/hostname

	echo "-- Configuring /etc/hosts"
	echo "127.0.0.1 localhost" >> /etc/hosts
	echo "::1 localhost" >> /etc/hosts
	echo "127.0.1.1 $net_fqdn $net_hostname" >> /etc/hosts
EOF
}

function chroot_config_network() {
cat << EOF
	echo "-- Configuring network interface: $net_iface"
	cat <<-'EOCONFIG' > /etc/systemd/network/${net_iface}.network
		[Match]
		Name=$net_iface

		[Link]
		MTUBytes=$net_iface_mtu

		[Network]
		DHCP=yes

		[DHCP]
		UseDNS=yes
	EOCONFIG

	systemctl --quiet enable systemd-networkd
	systemctl --quiet disable systemd-networkd-wait-online
EOF
}

function chroot_config_resolved() {
cat << EOF
	echo "-- Configuring systemd-resolved"
	awk -i inplace '
		/^#LLMNR=/ { \$0 = "LLMNR=no"; }
		/^#DNSStubListener=/ { \$0 = "DNSStubListener=no"; }
		{ print }' /etc/systemd/resolved.conf

	umount -q /etc/resolv.conf
	rm -f /etc/resolv.conf
	ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf
	systemctl --quiet enable systemd-resolved
EOF
}

function chroot_config_initcpio() {
cat << EOF
	echo "-- Configuring initcpio"

	initcpio_hooks=(
		base
		udev
		keyboard
		autodetect
		modconf
		block
		encrypt
		filesystems
		fsck
	)

	awk -i inplace -v hooks="\${initcpio_hooks[*]}" '
		/^HOOKS=/ { \$0 = "HOOKS=(" hooks ")" }
		{ print }' /etc/mkinitcpio.conf

	unset initcpio_hooks
	mkinitcpio -P
EOF
}

function chroot_config_bootloader() {
cat << EOF
	echo "-- Configuring bootloader"
	root_uuid="\$(blkid $root_part -o value | head -n 1)"
	linux_cmdline="cryptdevice=UUID=\${root_uuid}:${root_vol_name}"

	awk -i inplace -v cmdline="\$linux_cmdline" '
		/^GRUB_CMDLINE_LINUX_DEFAULT=/ {
			\$0 = "GRUB_CMDLINE_LINUX_DEFAULT=\"loglevel=3\""
		}
		/^GRUB_CMDLINE_LINUX=/ {
			\$0 = "GRUB_CMDLINE_LINUX=\"" cmdline "\""
		}
		/^GRUB_GFXMODE=/ {
			\$0 = "GRUB_GFXMODE=\"2560x1440x32\""
		}
		{ print }' /etc/default/grub
	
	unset linux_cmdline
	unset root_uuid
	grub-install --target=x86_64-efi --efi-directory=/boot \
		--bootloader-id=GRUB

	grub-mkconfig -o /boot/grub/grub.cfg
EOF
}

function chroot_config_nouveau() {
cat << EOF
	echo "-- Blacklist nouveau module"
	echo "blacklist nouveau" > /etc/modprobe.d/nouveau.conf
EOF
}

function chroot_config_trim() {
cat << EOF
	echo "-- Configuring periodic TRIM"
	systemctl --quiet enable fstrim.timer
EOF
}

function chroot_config_root_pass() {
cat << EOF
	echo "-- Configuring root password"
	echo 'root:$root_pass' | chpasswd
	unset root_pass
EOF
}

function chroot_config() {
	echo "- Chrooting inside $chroot_dir"
	arch-chroot -- "$chroot_dir" /bin/bash -s -- << EOS
		set -eEuo pipefail
		trap 'echo "Error: \$BASH_COMMAND failed (\$?)"' ERR

		$(chroot_config_time)
		$(chroot_config_locale)
		$(chroot_config_keymap)
		$(chroot_config_editor)
		$(chroot_config_hostname)
		$(chroot_config_network)
		$(chroot_config_resolved)
		$(chroot_config_initcpio)
		$(chroot_config_bootloader)
		$(chroot_config_nouveau)
		$(chroot_config_trim)
		$(chroot_config_root_pass)

EOS

	echo "(!) You may safely ignore unmount errors for resolv.conf"
}

function install_complete() {
	echo "- Installation complete"
	echo "- Manual configuration can be performed by enterring:"
	echo "arch-chroot $chroot_dir"
	echo
	echo "Before rebooting, perform the following cleanup:"
	echo "umount -R $chroot_dir"
	echo "cryptsetup close $root_vol_name"
	echo
}

function main() {
	root_check
	get_password_crypto
	get_password_root

	enable_livecd_ntp

	partition_install_dev
	encrypt_root_partition
	create_filesystems
	mount_filesystems

	chroot_bootstrap
	chroot_config

	install_complete
}

main "$@"

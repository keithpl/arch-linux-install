#!/usr/bin/env bash

set -eEuo pipefail

trap 'echo "Error: $BASH_COMMAND failed ($?)"' ERR

root_pass=""
crypt_pass=""

install_dev="/dev/nvme0n1"
boot_part="${install_dev}p1"
root_part="${install_dev}p2"
root_vol_name="root"
root_vol="/dev/mapper/$root_vol_name"

chroot_dir="/mnt/arch"
chroot_boot_dir="$chroot_dir/boot"

net_hostname="beta"
net_domain="local.lan"
net_fqdn="${net_hostname}.${net_domain}"
net_iface="wlan0"
net_iface_mtu="1500"

pass_confirm() {
	while true; do
		local confirm_str

		read -r -s -p "$2" "$1"; echo
		read -r -s -p "[Confirm] $2" confirm_str; echo

		if [[ "${!1}" == "$confirm_str" ]]; then
			break
		fi
		echo "Passwords no not match."
	done
}

pass_get() {
	pass_confirm "root_pass" "Enter root password: "
	pass_confirm "crypt_pass" "Enter password for encrypted root volume: "
}

livecd_prepare() {
	timedatectl set-ntp true
	sed -i '/^#ParallelDownloads/s/^#//g' /etc/pacman.conf
}

part_create() {
	echo "- Partitioning disk: $install_dev"

	wipefs -afq "$install_dev"
	sfdisk --quiet -- "$install_dev" <<- EOF
		label:gpt
		type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B,size=512MiB
		type=0FC63DAF-8483-4772-8E79-3D69D8477DE4
	EOF
}

part_encrypt() {
	echo "- Encrypting root partion: $root_part"
	echo "$crypt_pass" | cryptsetup luksFormat "$root_part"

	echo "- Opening encrypted root volume: $root_vol"
	echo "$crypt_pass" | cryptsetup --allow-discards		\
		--perf-no_read_workqueue --perf-no_write_workqueue	\
		--persistent open "$root_part" "$root_vol_name"

	unset crypt_pass
}

part_format() {
	echo "- Formatting boot partition: $boot_part"
	mkfs.fat -F32 "$boot_part" > /dev/null

	echo "- Formatting encrypted root volume: $root_vol"
	mkfs.btrfs -q "$root_vol" > /dev/null
}

fs_mount() {
	echo "- Mounting root filesystem on $root_vol to $chroot_dir"
	mount --mkdir "$root_vol" "$chroot_dir"

	echo "- Mounting boot filesystem on $boot_part to $chroot_boot_dir"
	mount --mkdir "$boot_part" "$chroot_boot_dir"
}

cpu_microcode() {
	local vendor_id

	vendor_id="$(grep vendor_id /proc/cpuinfo | head -n1 | cut -d' ' -f2)"

	case "$vendor_id" in
		"AuthenticAMD") echo "amd-ucode";;
		"GenuineIntel") echo "intel-ucode";;
		*) echo "";;
	esac
}

chroot_bootstrap() {
	local cpu_microcode

	echo "- Bootstrapping chroot environment: $chroot_dir"

	cpu_microcode="$(cpu_microcode)"

	pacman -Sy --noconfirm archlinux-keyring
	pacstrap "$chroot_dir" base linux linux-firmware mkinitcpio neovim \
		grub efibootmgr btrfs-progs dosfstools "$cpu_microcode"

	genfstab -U "$chroot_dir" >> "$chroot_dir/etc/fstab"
}

chroot_config_time() {
cat <<- EOF
	echo "-- Configuring time"

	ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime
	hwclock --systohc
	systemctl --quiet enable systemd-timesyncd
EOF
}

chroot_config_locale() {
cat <<- EOF
	echo "-- Configuring locale and keymap"
	sed -i '/^#en_US/s/^#//g' /etc/locale.gen
	sed -i '/^#ru_RU/s/^#//g' /etc/locale.gen
	locale-gen

	echo 'LANG="en_US.UTF-8"' > /etc/locale.conf
	echo 'KEYMAP="us"' > /etc/vconsole.conf
EOF
}

chroot_config_editor() {
cat <<- EOF
	echo '-- Configuring default \$EDITOR'
	echo 'EDITOR="nvim"' >> /etc/environment
	printf "\n%s\n" 'export EDITOR="nvim"' >> /etc/profile
EOF
}

chroot_config_hostname() {
cat <<- EOF
	echo "-- Configuring hostname"
	echo "$net_hostname" > /etc/hostname

	echo "-- Configuring /etc/hosts"
	cat <<- EOHOSTS > /etc/hosts
		127.0.0.1	localhost
		::1		localhost
		127.0.1.1	$net_fqdn	$net_hostname
	EOHOSTS
EOF
}

chroot_config_network() {
cat <<- EOF
	echo "-- Configuring network interface: $net_iface"
	cat <<- EOCONF > /etc/systemd/network/$net_iface.network
		[Match]
		Name=$net_iface

		[Link]
		MTUBytes=$net_iface_mtu

		[Network]
		DHCP=yes

		[DHCP]
		UseDNS=yes
	EOCONF

	systemctl --quiet enable systemd-networkd
	systemctl --quiet disable systemd-networkd-wait-online
EOF
}

chroot_config_resolved() {
cat <<- EOF
	echo "-- Configuring systemd-resolved"
	umount -q /etc/resolv.conf
	ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
	systemctl --quiet enable systemd-resolved
EOF
}

chroot_config_initcpio() {
cat <<- EOF
	initcpio_hooks=(
		base
		udev
		keyboard
		autodetect
		modconf
		block
		encrypt
		filesystems
		fsck
	)

	echo "-- Configuring initcpio"
	awk -i inplace -v hooks="\${initcpio_hooks[*]}" '
		/^HOOKS=/ { \$0 = "HOOKS=(" hooks ")" }
		{ print }' /etc/mkinitcpio.conf

	unset initcpio_hooks
	mkinitcpio -P
EOF
}

chroot_config_bootloader() {
cat <<- EOF
	echo "-- Configuring bootloader"

	root_uuid="\$(blkid $root_part -o value | head -n 1)"
	linux_cmdline="cryptdevice=UUID=\$root_uuid:$root_vol_name"

	awk -i inplace -v cmdline="\$linux_cmdline" '
		/^GRUB_CMDLINE_LINUX_DEFAULT=/ {
			\$0 = "GRUB_CMDLINE_LINUX_DEFAULT=\"loglevel=3\""
		}
		/^GRUB_CMDLINE_LINUX=/ {
			\$0 = "GRUB_CMDLINE_LINUX=\"" cmdline "\""
		}
		/^GRUB_GFXMODE=/ {
			\$0 = "GRUB_GFXMODE=\"2560x1440x32\""
		}
		/^GRUB_TIMEOUT=/ {
			\$0 = "GRUB_TIMEOUT=2"
		}
		{ print }' /etc/default/grub

	unset linux_cmdline
	unset root_uuid

	grub-install --target=x86_64-efi --efi-directory=/boot \
		--bootloader-id=GRUB

	grub-mkconfig -o /boot/grub/grub.cfg
EOF
}

chroot_config_finalize() {
cat <<- EOF
	echo "-- Blacklist nouveau module"
	echo "blacklist nouveau" > /etc/modprobe.d/nouveau.conf

	echo "-- Enable periodic TRIM"
	systemctl --quiet enable fstrim.timer

	echo "-- Configuring root password"
	echo 'root:$root_pass' | chpasswd
EOF

	unset root_pass
}

chroot_config() {
arch-chroot -- "$chroot_dir" /bin/bash -s -- <<- EOF
	set -eEuo pipefail

	trap 'echo "Error: \$BASH_COMMAND failed (\$?)"' ERR

	$(chroot_config_time)
	$(chroot_config_locale)
	$(chroot_config_editor)
	$(chroot_config_hostname)
	$(chroot_config_network)
	$(chroot_config_resolved)
	$(chroot_config_initcpio)
	$(chroot_config_bootloader)
	$(chroot_config_finalize)
EOF
}

main() {
	if [[ "$EUID" != 0 ]]; then
		echo "This script must be ran as root!"
		exit 1
	fi

	pass_get
	livecd_prepare

	part_create
	part_encrypt
	part_format
	fs_mount

	chroot_bootstrap
	chroot_config
}

main "$@"

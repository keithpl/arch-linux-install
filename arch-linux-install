#!/bin/bash

set -eEuo pipefail
trap 'echo "Error: $BASH_COMMAND failed ($?)"' ERR

install_dev="/dev/nvme0n1"
boot_part="${install_dev}p1"
root_part="${install_dev}p2"
root_vol_name="root"
root_vol="/dev/mapper/${root_vol_name}"

crypto_pass=""
root_pass=""

chroot_dir="/mnt/arch"
chroot_boot_dir="${chroot_dir}/boot"

net_hostname="beta"
net_domain="local.lan"
net_fqdn="${net_hostname}.${net_domain}"
net_iface="wlan0"
net_iface_mtu="1500"

function get_password() {
	local pass_confirm=""

	while true; do
		read -s -p "$2" $1; echo
		read -s -p "Confirm password: " pass_confirm; echo

		[[ "${!1}" == "$pass_confirm" ]] && break
		echo "Passwords do not match"
	done
}

function get_installation_passwords() {
	get_password "root_pass" "Enter root password for $net_fqdn: "
	get_password "crypto_pass" "Enter crypto password for $root_part: "
}

function partition_install_dev() {
	local gdisk_cmds="n\n\n\n+512M\nef00\nn\n\n\n\n\nw\nY\n"

	echo "- Partitioning disk: $install_dev"
	wipefs -afq "${install_dev}"
	echo -e "$gdisk_cmds" | gdisk "$install_dev" > /dev/null
}

function encrypt_root_partition() {
	echo "- Encrypting root partition: $root_part"
	echo "$crypto_pass" | cryptsetup luksFormat "$root_part"

	echo "- Opening encrypted root volume: $root_vol"
	echo "$crypto_pass" | cryptsetup --allow-discards 		\
		--perf-no_read_workqueue --perf-no_write_workqueue 	\
		--persistent open "$root_part" "$root_vol_name"

	unset crypto_pass
}

function create_filesystems() {
	echo "- Formatting boot partition: $boot_part"
	mkfs.fat -F32 "$boot_part" > /dev/null

	echo "- Formatting encrypted root volume: $root_vol"
	mkfs.btrfs -q "$root_vol" > /dev/null

	echo "- Mounting root filesystem on $root_vol to $chroot_dir"
	mount --mkdir "$root_vol" "$chroot_dir"

	echo "- Mounting boot filesystem on $boot_part to $chroot_boot_dir"
	mount --mkdir "$boot_part" "$chroot_boot_dir"
}

function chroot_bootstrap() {
	echo "- Bootstrapping chroot environment: $chroot_dir"
	sed -i '/^#ParallelDownloads/s/^#//g' /etc/pacman.conf

	pacstrap "$chroot_dir" base linux linux-firmware linux-headers	\
		mkinitcpio neovim grub efibootmgr intel-ucode 		\
		btrfs-progs dosfstools

	genfstab -U "$chroot_dir" >> "${chroot_dir}/etc/fstab"
}

function chroot_config_time() {
cat << EOF
	echo "-- Configuring time"
	ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime
	hwclock --systohc

	systemctl --quiet enable systemd-timesyncd
EOF
}

function chroot_config_locale() {
cat << EOF
	echo "-- Configuring locale"
	sed -i '/^#en_US/s/^#//g' /etc/locale.gen
	sed -i '/^#ru_RU/s/^#//g' /etc/locale.gen
	locale-gen

	echo "LANG=en_US.UTF-8" > /etc/locale.conf
	echo "KEYMAP=us" > /etc/vconsole.conf
EOF
}

function chroot_config_editor() {
cat << EOF
	echo "-- Configuring default \$EDITOR"
	echo "EDITOR=nvim" >> /etc/environment
	echo -e "\nexport EDITOR=nvim" >> /etc/profile
EOF
}

function chroot_config_hostname() {
cat << EOF
	echo "-- Configuring hostname"
	echo "$net_hostname" > /etc/hostname

	echo "-- Configuring /etc/hosts"
	echo "127.0.0.1 localhost" >> /etc/hosts
	echo "::1 localhost" >> /etc/hosts
	echo "127.0.1.1 $net_fqdn $net_hostname" >> /etc/hosts
EOF
}

function chroot_config_network() {
cat << EOF
	echo "-- Configuring network interface: $net_iface"
	cat <<-'EOCONFIG' > /etc/systemd/network/${net_iface}.network
		[Match]
		Name=$net_iface

		[Link]
		MTUBytes=$net_iface_mtu

		[Network]
		DHCP=yes

		[DHCP]
		UseDNS=yes
	EOCONFIG

	systemctl --quiet enable systemd-networkd
	systemctl --quiet disable systemd-networkd-wait-online
EOF
}

function chroot_config_resolved() {
cat << EOF
	echo "-- Configuring systemd-resolved"
	awk -i inplace '
		/^#LLMNR=/ { \$0 = "LLMNR=no" }
		/^#DNSStubListener=/ { \$0 = "DNSStubListener=no" }
		{ print }' /etc/systemd/resolved.conf

	umount -q /etc/resolv.conf
	ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf
	systemctl --quiet enable systemd-resolved
EOF
}

function chroot_config_initcpio() {
cat << EOF
	echo "-- Configuring initcpio"

	initcpio_hooks=(
		base
		udev
		keyboard
		autodetect
		modconf
		block
		encrypt
		filesystems
		fsck
	)

	awk -i inplace -v hooks="\${initcpio_hooks[*]}" '
		/^HOOKS=/ { \$0 = "HOOKS=(" hooks ")" }
		{ print }' /etc/mkinitcpio.conf

	unset initcpio_hooks
	mkinitcpio -P
EOF
}

function chroot_config_bootloader() {
cat << EOF
	echo "-- Configuring bootloader"
	root_uuid="\$(blkid $root_part -o value | head -n 1)"
	linux_cmdline="cryptdevice=UUID=\${root_uuid}:${root_vol_name}"

	awk -i inplace -v cmdline="\$linux_cmdline" '
		/^GRUB_CMDLINE_LINUX_DEFAULT=/ {
			\$0 = "GRUB_CMDLINE_LINUX_DEFAULT=\"loglevel=3\""
		}
		/^GRUB_CMDLINE_LINUX=/ {
			\$0 = "GRUB_CMDLINE_LINUX=\"" cmdline "\""
		}
		/^GRUB_GFXMODE=/ {
			\$0 = "GRUB_GFXMODE=\"2560x1440x32\""
		}
		/^GRUB_TIMEOUT=/ {
			\$0 = "GRUB_TIMEOUT=2"
		}
		{ print }' /etc/default/grub
	
	unset linux_cmdline
	unset root_uuid
	grub-install --target=x86_64-efi --efi-directory=/boot \
		--bootloader-id=GRUB

	grub-mkconfig -o /boot/grub/grub.cfg
EOF
}

function chroot_config_finalize() {
cat << EOF
	echo "-- Blacklist nouveau module"
	echo "blacklist nouveau" > /etc/modprobe.d/nouveau.conf

	echo "-- Configuring periodic TRIM"
	systemctl --quiet enable fstrim.timer

	echo "-- Configuring root password"
	echo 'root:$root_pass' | chpasswd
EOF

	unset root_pass
}

function chroot_config() {
arch-chroot -- "$chroot_dir" /bin/bash -s -- << EOF
	set -eEuo pipefail
	trap 'echo "Error: \$BASH_COMMAND failed (\$?)"' ERR

	$(chroot_config_time)
	$(chroot_config_locale)
	$(chroot_config_editor)
	$(chroot_config_hostname)
	$(chroot_config_network)
	$(chroot_config_resolved)
	$(chroot_config_initcpio)
	$(chroot_config_bootloader)
	$(chroot_config_finalize)
EOF
}

function install_complete() {
	echo "- Installation complete"
	echo "- Manual configuration can be performed by enterring:"
	echo "arch-chroot $chroot_dir"
	echo
	echo "Before rebooting, perform the following cleanup:"
	echo "umount -R $chroot_dir"
	echo "cryptsetup close $root_vol_name"
	echo
}

function main() {
	if [[ $EUID != 0 ]]; then
		echo "This script must be run with root privileges."
		exit 1
	fi

	timedatectl set-ntp true

	get_installation_passwords
	partition_install_dev
	encrypt_root_partition
	create_filesystems

	chroot_bootstrap
	chroot_config

	install_complete
}

main "$@"
